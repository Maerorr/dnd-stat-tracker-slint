import { Palette } from "palette.slint";
import { HorizontalBox, VerticalBox, LineEdit, TabWidget } from "std-widgets.slint";
import { DiamondStroke, Line, DiamondFilled, Diamond } from "drawing.slint";
import { TopBadButton, NormalButton } from "button.slint";
import { SlintShortSpellEntry } from "../logic.slint";
import { EditMode } from "globals.slint";
 
export component Label inherits Text {
    font-size: 20px;
    color: Palette.text_color;
    horizontal-alignment: center;
}

export component Heading inherits Text {
    font-size: 30px;
    color: Palette.text_color;
    horizontal-alignment: center;
}

export component SingleStat {
    in property <string> name;
    in property <string> value;
    in property <string> modifier;
    in property <color> color;

    property <length> widget-width: 130px;

    // (name, "-" or "+")
    callback edit-stat(string, string);

    VerticalLayout {
        width: widget-width;
        Label {
            width: widget-width;
            text: name;
            color: color;
        }

        if EditMode.active : HorizontalLayout {
            alignment: center;
            VerticalLayout {
                sub-button := NormalButton {
                    text: "-";
                    width: 20px;
                    height: 20px;
                    clicked => {
                        edit-stat(name, "-");
                    }
                }
            }
            Label {
                width: widget-width / 3.5;
                text: value;
                color: Palette.text_color;
                horizontal-alignment: center;
            }
            Label {
                width: widget-width / 3.5;
                text: modifier;
                color: Palette.text_color;
                horizontal-alignment: center;
            }
            VerticalLayout {
                add-button := NormalButton {
                    text: "+";
                    width: 20px;
                    height: 20px;
                    clicked => {
                        edit-stat(name, "+")
                    }
                }
            }
        }
        if !EditMode.active : HorizontalLayout {
            alignment: center;
            Label {
                width: widget-width / 3.5;
                text: value;
                color: Palette.text_color;
                horizontal-alignment: center;
            }
            Label {
                width: widget-width / 3.5;
                text: modifier;
                color: Palette.text_color;
                horizontal-alignment: center;
            }
        }
    }
}

export component SavingThrow {
    in property <string> name;
    in property <string> modifier;
    in property <color> color;
    in property <bool> proficient;
    width: 150px;
    height: 25px;

    HorizontalLayout {
        x: 9px;
        y: 0px;
        
        alignment: start;
        
        if proficient : DiamondFilled {
            radius: 7px;
        } 
        if !proficient : DiamondStroke {
            radius: 7px;
        }
    
        Text {
            width: 45px;
            text: modifier;
            color: Palette.text_color;
            horizontal-alignment: center;
            font-size: 18px;
        }
        Text {
            width: 120px;
            text: name;
            color: color;
            horizontal-alignment: left;
            font-size: 18px;
        }
        
    }    
}

export component Skill {
    in property <string> name;
    in property <string> modifier;
    in property <string> stat-short-name;
    in property <color> color;
    in property <bool> proficient;
    in property <bool> expertise;
    width: 200px;
    height: 25px;

    HorizontalLayout {
        x: 9px;
        y: 0px;
        
        alignment: start;
        
        if proficient : DiamondFilled {
            radius: 7px;
        } 
        if !proficient : DiamondStroke {
            radius: 7px;
        }
    
        Text {
            width: 45px;
            text: modifier;
            color: Palette.text_color;
            horizontal-alignment: center;
            font-size: 18px;
        }
        Text {
            width: 150px;
            text: name;
            color: Palette.text_color;
            horizontal-alignment: left;
            font-size: 18px;
        }
        Text {
            width: 45px;
            text: stat-short-name;
            color: color;
            horizontal-alignment: center;
            font-size: 14px;
        }

        if expertise : Text {
            width: 15px;
            text: "e";
            color: Palette.text_color;
            horizontal-alignment: center;
            font-size: 14px;
        }
    }
}

export component HitDice {
    in property <string> hit-dice-total;
    in property <string> hit-dice-left;
    in property <length> widget-width;

    callback use-dice();

    VerticalLayout {
        width: widget-width;
        Text {
            text: "Hit Dice";
            font-size: 18px;
            color: Palette.text_color;
            horizontal-alignment: center;
            vertical-alignment: center;
        }
        HorizontalLayout {
            width: widget-width;
            height: 20px;
            Text {
                width: widget-width / 3;
                text: "Total";
                font-size: 16px;
                color: Palette.text_color;
                horizontal-alignment: left;
                vertical-alignment: center;
            }
            Text {
                width: widget-width / 3;
                text: hit-dice-total;
                font-size: 16px;
                color: Palette.text_color;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
        }

        HorizontalLayout {
            width: widget-width;
            height: 20px;
            Text {
                width: widget-width / 3;
                text: "Left";
                font-size: 16px;
                color: Palette.text_color;
                horizontal-alignment: left;
            }
            Text {
                width: widget-width / 3;
                text: hit-dice-left;
                font-size: 16px;
                color: Palette.text_color;
                horizontal-alignment: center;
            }
            VerticalLayout {
                alignment: center;
                HorizontalLayout {
                    alignment: center;
                    NormalButton {
                        text: "Use";
                        width: widget-width / 3;
                        height: 20px;
                        clicked => {
                            use-dice();
                        }
                    }
                }
            }
        }
    }
}

export component DeathSaves {
    in property <int> successes;
    in property <int> failures;
    in property <length> widget-width;

    callback add-success();
    callback add-failure();
    callback reset-saves();

    VerticalLayout {
        GridLayout {
            Row {
                Text {
                    width: widget-width / 2.5;
                    text: "Successes:";
                    font-size: 16px;
                    color: Palette.text_color;
                    horizontal-alignment: left;
                    vertical-alignment: center;
                    wrap: no-wrap;
                    horizontal-stretch: 1;
                    height: 18px;
                }
    
                Rectangle {
                    width: 6px;
                    height: 0px;
                    border-radius: 0px;
                }
            
                HorizontalLayout {
                    width: widget-width / 3;
                    for success[index] in [successes, successes - 1, successes - 2] : Diamond {
                        radius: 7px;
                        filled: success;
                    }
                }
    
                Rectangle {
                    width: 6px;
                    height: 0px;
                    border-radius: 0px;
                }
    
                NormalButton {
                    text: "Add";
                    width: widget-width / 3;
                    height: 20px;
                    clicked => {
                        add-success();
                    }
                }
            }
        }
        GridLayout {
            Row {
                Text {
                    width: widget-width / 2.5;
                    text: "Failures:";
                    font-size: 16px;
                    color: Palette.text_color;
                    horizontal-alignment: left;
                    vertical-alignment: center;
                    wrap: no-wrap;
                    horizontal-stretch: 1;
                    height: 18px;
                }
                Rectangle {
                    width: 6px;
                    height: 0px;
                    border-radius: 0px;
                } 
                HorizontalLayout {
                    width: widget-width / 3;
                    for death[index] in [failures, failures - 1, failures - 2] : Diamond {
                        radius: 7px;
                        filled: death;
                    }
                }
                Rectangle {
                    width: 6px;
                    height: 0px;
                    border-radius: 0px;
                }
    
                NormalButton {
                    text: "Add";
                    width: widget-width / 3;
                    height: 20px;
                    clicked => {
                        add-failure();
                    }
                }
            }
        }
        GridLayout {
            width: widget-width;
            
            Row {
                VerticalLayout {
                    padding-left: widget-width * 0.06666;
                    padding-top: 5px;
                    alignment: center;
                    HorizontalLayout {
                        alignment: center;
                        NormalButton {
                            text: "Reset Death Saves";
                            width: widget-width;
                            height: 18px;
                            clicked => {
                                reset-saves();
                            }
                        }
                    }
                }
            }
        }
    }
}

export component LineInput inherits Rectangle {
    background: Palette.dark;

    out property <string> input-value;

    callback text-changed(string);
    callback clear();

    clear => {
        text.text = "";
    }

    VerticalLayout {
        alignment: center;
        HorizontalLayout {
            alignment: center;
            text := TextInput {
                width: 100%;
                height: 100%;
                font-size: 16px;
                color: Palette.text_color;
                horizontal-alignment: center;
                vertical-alignment: center;
                edited => {
                    input-value = text.text;
                }
            }
        }
    }
}

export component MoneyWidget {
    in property <int> amount;
    in property <string> name;
    in property <color> text-color;
    in property <length> widget-width;
    out property <string> entered-value;

    callback add-clicked(string);
    callback sub-clicked(string);
    
    VerticalLayout {
        Label {
            width: widget-width;
            text: amount;
            font-size: 18px;
            horizontal-alignment: center;
        }
        Label {
            text: name;
            font-size: 18px;
            color: text-color;
        }
        VerticalLayout {
            alignment: center;
            HorizontalLayout {
                alignment: center;
                line-in := LineInput {
                    width: widget-width * 0.8;
                    height: 20px;
                }
            }
        }
        
        VerticalLayout {
            alignment: center;
            height: 20px;
            HorizontalLayout {
                alignment: center;
                add := NormalButton {
                    text: "Add";
                    width: widget-width / 2;
                    height: 18px;
                    clicked => {
                        add-clicked(line-in.input-value);
                        line-in.clear();
                    }
                }
            }
        }
        VerticalLayout {
            alignment: center;
            height: 20px;
            HorizontalLayout {
                alignment: center;
                sub := NormalButton {
                    text: "Sub";
                    width: widget-width / 2;
                    height: 18px;
                    clicked => {
                        sub-clicked(line-in.input-value);
                        line-in.clear();
                    }
                }
            }
        }
        
    }
}

export component LevelHeader {
    in property <string> level;
    in property <string> spell-slots;

    callback use-slot();
    callback add-slot();

    HorizontalLayout {
        padding-top: 12px;
        min-height: 26px;
        alignment: center;
        if level == "0" : Label {
            width: 50%;
            height: 26px;
            text: "Cantrips";
            font-size: 20px;
            horizontal-alignment: left;
            vertical-alignment: center;
        }
        if level != "0" : HorizontalLayout {
            width: 100%;
            height: 26px;
            alignment: center;
            Label {
                width: 60%;
                height: 26px;
                text: "Level " + level;
                font-size: 20px;
                horizontal-alignment: left;
                vertical-alignment: center;
            }
            VerticalLayout {
                padding-top: 6px;
                padding-bottom: 2px;
                alignment: center;
                height: 20px;
                HorizontalLayout {
                    alignment: center;
                    sub := NormalButton {
                        text: "-";
                        width: 18px;
                        height: 18px;
                        clicked => {
                            add-slot();
                        }
                    }
                }
            }
            Text {
                width: 20%;
                height: 26px;
                text: spell-slots;
                font-size: 18px;
                horizontal-alignment: center;
                vertical-alignment: bottom;
                color: Palette.text_color;
            }   
            VerticalLayout {
                padding-top: 6px;
                alignment: center;
                height: 20px;
                HorizontalLayout {
                    alignment: center;
                    add := NormalButton {
                        text: "+";
                        width: 18px;
                        height: 18px;
                        clicked => {
                            use-slot();
                        }
                    }
                }
            }    
        }       
    }
}

export component SpellEntry {
    in property <SlintShortSpellEntry> spell;

    spell-popup := PopupWindow {
        x: - parent.x;
        y: - parent.y;
        width: 600px;
        height: 200px + description.preferred-height * 1.2;
        Rectangle {
            width: 100%;
            height: 100%;
            background: Palette.dark;

            content := VerticalLayout {
                padding-left: 10px;
                padding-right: 10px;
                y: 0;
                alignment: center;
                Text {
                    height: 30px;
                    text: spell.name;
                    font-size: 24px;
                    width: 100%;
                    color: Palette.text_color;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                }
                Text {
                    text: "Level: " + spell.level;
                    font-size: 18px;
                    width: 100%;
                    color: Palette.text_color;
                    horizontal-alignment: left;
                    vertical-alignment: center;
                }
                Text {
                    text: "School: " + spell.school;
                    font-size: 18px;
                    width: 100%;
                    color: Palette.text_color;
                    horizontal-alignment: left;
                    vertical-alignment: center;
                }
                Text {
                    text: "Casting time: " + spell.casting_time;
                    font-size: 18px;
                    width: 100%;
                    color: Palette.text_color;
                    horizontal-alignment: left;
                    vertical-alignment: center;
                }
                Text {
                    text: "Range: " + spell.range;
                    font-size: 18px;
                    width: 100%;
                    color: Palette.text_color;
                    horizontal-alignment: left;
                    vertical-alignment: center;
                }
                Text {
                    text: "Components: " + spell.components;
                    font-size: 18px;
                    width: 100%;
                    color: Palette.text_color;
                    horizontal-alignment: left;
                    vertical-alignment: center;
                }
                Text {
                    text: "Duration: " + spell.duration;
                    font-size: 18px;
                    width: 100%;
                    color: Palette.text_color;
                    horizontal-alignment: left;
                    vertical-alignment: center;
                }
                Line {
                    height: 12px;
                    from: {x: 0, y: 0};
                    to: {x: 1, y: 0};
                }
                description := Text {
                    text: spell.description;
                    font-size: 18px;
                    width: 100%;
                    color: Palette.text_color;
                    horizontal-alignment: left;
                    vertical-alignment: center;
                    wrap: word-wrap;
                }
                if spell.ritual : Text {
                    text: "At higher levels: " + spell.higher-levels;
                    font-size: 18px;
                    width: 100%;
                    color: Palette.text_color;
                    horizontal-alignment: left;
                    vertical-alignment: center;
                    wrap: word-wrap;
                }
            }
        }
    }

    VerticalLayout {
        HorizontalLayout {
            alignment: start;
            VerticalLayout {
                alignment: center;
                HorizontalLayout {
                    height: 14px;
                    padding-left: 10px;
                    padding-right: 10px;
                    if spell.prepared : Diamond {
                        filled: 1;
                        radius: 5px;
                    }
                    if !spell.prepared : Diamond {
                        filled: 0;
                        radius: 5px;
                    }
                }
            }
            
            label := Label {
                min-height: self.preferred-height;
                width: 65%;
                text: spell.name;
                font-size: 16px;
                horizontal-alignment: left;
                vertical-alignment: center;
                wrap: word-wrap;
            }
            if spell.ritual : Text {
                width: 10%;
                text: "(R)";
                font-size: 12px;
                horizontal-alignment: center;
                vertical-alignment: center;
                color: Palette.text_color;
            }
            if !spell.ritual : Text {
                width: 10%;
                text: "";
                font-size: 12px;
                horizontal-alignment: center;
                vertical-alignment: center;
                color: Palette.text_color;
            }
            VerticalLayout {
                alignment: center;
                height: label.preferred-height;
                HorizontalLayout {
                    alignment: center;
                    NormalButton {
                        text: "Info";
                        width: 40px;
                        height: 20px;
                        clicked => {
                            spell-popup.show();
                        }
                    
                    }
                }
            }
        }

        Line {
            height: 4px;
            from: {x: 0, y: 0};
            to: {x: 1, y: 0.0};
            stroke: Palette.text_color;
            stroke-width: 0.5px;
        }
    }
}