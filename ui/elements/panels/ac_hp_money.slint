import { Heading, Label, SavingThrow, Skill, HitDice, DeathSaves, MoneyWidget, LineInput} from "../text_widgets.slint";
import { VerticalBox, GridBox, Button, ComboBox } from "std-widgets.slint";
import { Palette } from "../palette.slint";
import { Line, Arrow } from "../drawing.slint";
import { SlintCharacter } from "../../logic.slint";
import { DamageButton, HealButton, TempHpButton, NormalButton } from "../button.slint";

export component AcHpMoneyPanel {
    in-out property <SlintCharacter> in-character;
    property <length> grid-width: 475px;

    // (name, value-as-string)
    callback add-money(string, string);
    callback subtract-money(string, string);

    // HP RELATED PROPERTIES AND CALLBACKS
    //property <string> hp-input-string;
    callback take-damage(string);
    callback heal(string);
    callback add-temp-hp(string);
    callback subtract-temp-hp(string);

    callback use-hit-dice();

    callback clear-hp-input();

    callback add-success();
    callback add-failure();
    callback reset-death-saves();

    // (from, to, amount-as-string)
    property <string> convert-from-string;
    property <string> convert-to-string;
    callback convert-money(string, string, string);

    clear-hp-input => {
        hp-input.clear();
    }

    GridLayout {
        min-width: grid-width;
        spacing: 10px;
        padding-top: 10px;
        Row {
            // AC INITIATIVE SPEED
            HorizontalLayout {
                VerticalLayout {
                    width: grid-width / 3;
                    height: 50px;
                    Label {
                        text: in-character.armor-class;
                        font-size: 20px;
                    }
                    Label {
                        text: "Armor Class";
                        font-size: 16px;
                    }
                }
                VerticalLayout {
                    width: grid-width / 3;
                    height: 50px;
                    Label {
                        text: in-character.initiative;
                        font-size: 20px;
                    }
                    Label {
                        text: "Initiative";
                        font-size: 16px;
                    }
                }
                VerticalLayout {
                    width: grid-width / 3;
                    height: 50px;
                    Label {
                        text: in-character.speed + "ft.";
                        font-size: 20px;
                    }
                    Label {
                        text: "Speed";
                        font-size: 16px;
                    }
                }
            }
        }
        Row {
            Line {
                height: 6px;
                from: {x: 0, y: 0};
                to: {x: 1, y: 0};
            }
        }
        Row {
            // HP
            GridLayout {
                width: grid-width;
                Row {
                    Rectangle {
                        width: 10px;
                        height: 0px;
                        border-radius: 0px;
                    }
                    Text {
                        width: grid-width / 3;
                        text: "HP Max";
                        font-size: 16px;
                        vertical-alignment: center;
                        horizontal-alignment: left;
                        color: Palette.text_color;
                    }
                    Text {
                        width: grid-width / 8;
                        text: in-character.max-hp;
                        font-size: 16px;
                        vertical-alignment: center;
                        horizontal-alignment: left;
                        color: Palette.text_color;
                    }
                    VerticalLayout {
                        alignment: center;
                        height: 20px;
                        HorizontalLayout {
                            alignment: center;
                            hp-input := LineInput {
                                width: grid-width / 3;
                                height: 20px;
                                // text-changed(value) => {
                                //     hp-input-string = value;
                                // }
                            }
                        }
                    }
                    
                }
            }
        }
        Row {
            GridLayout {
                Row {
                    Rectangle {
                        width: 10px;
                        height: 0px;
                        border-radius: 0px;
                    }
                    Text {
                        width: grid-width / 3;
                        text: "HP Current";
                        font-size: 20px;
                        vertical-alignment: center;
                        horizontal-alignment: left;
                        color: Palette.current_hp_color;
                    }
                    Text {
                        width: grid-width / 8;
                        text: in-character.current-hp;
                        font-size: 20px;
                        vertical-alignment: center;
                        horizontal-alignment: left;
                        color: Palette.text_color;
                    }
                    
                    VerticalLayout {
                        alignment: center;
                        HorizontalLayout {
                            alignment: center;
                            DamageButton {
                                width: grid-width / 5;
                                text: "Damage";
                                clicked => {
                                    take_damage(hp-input.input-value);
                                    clear_hp_input();
                                }
                            }
                        }
                    }
                    VerticalLayout {
                        alignment: center;
                        HorizontalLayout {
                            alignment: center;
                            HealButton {
                                width: grid-width / 5;
                                text: "Heal";
                                clicked => {
                                    heal(hp-input.input-value);
                                    clear_hp_input();
                                }
                            }
                        }
                    }
                }
                Row {
                    Rectangle {
                        width: 10px;
                        height: 0px;
                        border-radius: 0px;
                    }
                    Text {
                        width: grid-width / 3;
                        text: "HP Temp";
                        font-size: 20px;
                        vertical-alignment: center;
                        horizontal-alignment: left;
                        color: Palette.temp_hp_color;
                    }
                    Text {
                        width: grid-width / 8;
                        text: in-character.temp-hp;
                        font-size: 20px;
                        vertical-alignment: center;
                        horizontal-alignment: left;
                        color: Palette.text_color;
                    }
                    
                    VerticalLayout {
                        alignment: center;
                        HorizontalLayout {
                            alignment: center;
                            TempHpButton {
                                width: grid-width / 5;
                                text: "Add";
                                clicked => {
                                    add_temp_hp(hp-input.input-value);
                                    clear_hp_input();
                                }
                            }
                        }
                    }
                    VerticalLayout {
                        alignment: center;
                        HorizontalLayout {
                            alignment: center;
                            TempHpButton {
                                width: grid-width / 5;
                                text: "Subtract";
                                clicked => {
                                    subtract_temp_hp(hp-input.input-value);
                                    clear_hp_input();
                                }
                            }
                        }
                    }
                }
            }
        }
        Row {
            Line {
                height: 6px;
                from: {x: 0, y: 0};
                to: {x: 1, y: 0};
            }
        }
        Row {
            HorizontalLayout {
                min-height: 25px;
                width: grid-width;
                Rectangle {
                    width: 10px;
                    height: 0px;
                    border-radius: 0px;
                }
                HitDice {
                    widget-width: grid-width / 3;
                    hit-dice-total: in-character.hit-dice-total;
                    hit-dice-left: in-character.hit-dice-left;
                    use-dice => {
                        use-hit-dice();
                    }
                }
                Line {
                    width: 18px;
                    from: {x: 0, y: 0};
                    to: {x: 0, y: 1};
                }
                DeathSaves {
                    failures: in-character.death-saves-failures;
                    successes: in-character.death-saves-successes;
                    widget-width: grid-width / 2;
                    height: 50px;
                    add-success => {
                        add-success();
                    }
                    add-failure => {
                        add-failure();
                    }
                    reset-saves => {
                        reset-death-saves();
                    }
                }
            }
        }
        Row {
            Line {
                height: 6px;
                from: {x: 0, y: 0};
                to: {x: 1, y: 0};
            }
        }
        Row {
            HorizontalLayout {
                width: grid-width;
                height: 120px;
                alignment: stretch;
                MoneyWidget {
                    name: "CP";
                    amount: in-character.money.cp;
                    widget-width: grid-width / 5;
                    text-color: Palette.copper_color;
                    // todo, money add/sub callbacks
                    add-clicked(val) => {
                        add_money("cp", val);
                    }
                    sub-clicked(val) => {
                        subtract_money("cp", val);
                    }
                }
                MoneyWidget {
                    name: "SP";
                    amount: in-character.money.sp;
                    widget-width: grid-width / 5;
                    text-color: Palette.silver_color;
                    add-clicked(val) => {
                        add_money("sp", val);
                    }
                    sub-clicked(val) => {
                        subtract_money("sp", val);
                    }
                }
                MoneyWidget {
                    name: "EP";
                    amount: in-character.money.ep;
                    widget-width: grid-width / 5;
                    text-color: Palette.electrum_color;
                    add-clicked(val) => {
                        add_money("ep", val);
                    }
                    sub-clicked(val) => {
                        subtract_money("ep", val);
                    }
                }
                MoneyWidget {
                    name: "GP";
                    amount: in-character.money.gp;
                    widget-width: grid-width / 5;
                    text-color: Palette.gold_color;
                    add-clicked(val) => {
                        add_money("gp", val);
                    }
                    sub-clicked(val) => {
                        subtract_money("gp", val);
                    }
                }
                MoneyWidget {
                    name: "PP";
                    amount: in-character.money.pp;
                    widget-width: grid-width / 5;
                    text-color: Palette.platinum_color;
                    add-clicked(val) => {
                        add-money("pp", val);
                    }
                    sub-clicked(val) => {
                        subtract-money("pp", val);
                    }
                }
            }
        }
        Row {
            Line {
                height: 6px;
                from: {x: 0, y: 0};
                to: {x: 1, y: 0};
            }
        }
        Row {
            VerticalLayout {
                width: grid-width;
                height: 90px;
                spacing: 5px;
                Text {
                    height: 30px;
                    text: "Convert Money";
                    font-size: 20px;
                    color: Palette.text_color;
                    horizontal-alignment: center;
                    vertical-alignment: top;
                }
                HorizontalLayout {
                    width: grid-width;
                    height: 30px;
                    alignment: center;
                    spacing: 10px;
                    convert-amount := LineInput {
                        width: grid-width / 6;
                        height: 30px;
                    }
                    convert-from := ComboBox {
                        model: ["Copper", "Silver", "Electrum", "Gold", "Platinum"];
                        width: grid-width / 4;
                        height: 30px;
                        current-value: "Copper";
                        selected(val) => {
                            convert-from-string = val;
                        }
                        init => {
                            convert-from-string = self.current-value;
                        }
                    }
                    Arrow {
                        width: 75px;
                        height: 30px;
                    }
                    convert-to := ComboBox {
                        model: ["Copper", "Silver", "Electrum", "Gold", "Platinum"];
                        width: grid-width / 4;
                        height: 30px;
                        current-value: "Silver";
                        selected(val) => {
                            convert-to-string = val;
                        }
                        init => {
                            convert-to-string = self.current-value;   
                        }
                    }
                }
                VerticalLayout {
                    alignment: center;
                    HorizontalLayout {
                        alignment: center;
                        NormalButton {
                            width: grid-width / 5;
                            text: "Convert";
                            clicked => {
                                convert-money(convert-from-string, convert-to-string, convert-amount.input-value);
                            }
                        }
                    }
                }
            }
        }
        Row {
            Line {
                height: 6px;
                from: {x: 0, y: 0};
                to: {x: 1, y: 0};
            }
        }
    }
}