import {Palette} from "palette.slint";

export component TopButton inherits Rectangle {
    in-out property text <=> txt.text;
    callback clicked <=> touch.clicked;
    border-radius: root.height / 8;
    border-width: 1px;
    border-color: root.background.darker(25%);
    background: touch.pressed ? Palette.button_pressed_color : touch.has-hover ? Palette.button_hover_color :  Palette.button_idle_color;
    height: 50px;
    min-width: txt.preferred-width + 20px;
    txt := Text {
        y: (parent.height - self.height)/2 + (touch.pressed ? 1px : 0);
        color: touch.pressed ? #b3b3b3 : #c9c9c9;
        font-size: 16px;
        vertical-alignment: center;
        horizontal-alignment: center;
    }
    touch := TouchArea { }
}

export component TopBadButton {
    in property <string> text;
    VerticalLayout {
        alignment: start;
        TopButton { text: text; }
    }
}

// export component DamageButton inherits Rectangle {
//     in-out property text <=> txt.text;
//     callback clicked <=> touch.clicked;
//     border-radius: root.height / 8;
//     border-width: 1px;
//     border-color: root.background.darker(25%);
//     background: touch.pressed ? Palette.damage_button_pressed_color : touch.has-hover ? Palette.button_hover_color :  Palette.damage_button_idle_color;
//     height: 22px;
//     min-width: txt.preferred-width + 20px;
//     txt := Text {
//         y: (parent.height - self.height)/2;
//         color: touch.pressed ? #b3b3b3 : #c9c9c9;
//         font-size: 14px;
//         vertical-alignment: center;
//         horizontal-alignment: center;
//     }
//     touch := TouchArea { }
// }

export component DamageButton inherits Rectangle {
    in property <length> area-width;
    in property <length> area-height;
    in property <length> button-width;
    in property <length> button-height;

    in-out property text <=> txt.text;

    callback clicked <=> touch.clicked;

    horizontal-stretch: 0;
    vertical-stretch: 0;

    width: area-width;
    height: area-height;

    base := Rectangle {
        width: button-width;
        height: button-height;

        border-radius: root.height / 8;
        border-width: 1px;
        border-color: root.background.darker(25%);
        background: touch.pressed ? Palette.damage_button_pressed_color : touch.has-hover ? Palette.button_hover_color :  Palette.damage_button_idle_color;
    }

    txt := Text {
        y: (parent.height - self.height)/2;
        color: touch.pressed ? #b3b3b3 : #c9c9c9;
        font-size: 14px;
        vertical-alignment: center;
        horizontal-alignment: center;
    }

    touch := TouchArea {
        width: area-width;
        height: area-height;
    }
}

// export component HealButton inherits Rectangle {
//     in-out property text <=> txt.text;
//     callback clicked <=> touch.clicked;
//     border-radius: root.height / 8;
//     border-width: 1px;
//     border-color: root.background.darker(25%);
//     background: touch.pressed ? Palette.heal_button_pressed_color : touch.has-hover ? Palette.heal_button_hover_color :  Palette.heal_button_idle_color;
//     height: 22px;
//     min-width: txt.preferred-width + 20px;
//     txt := Text {
//         y: (parent.height - self.height)/2;
//         color: touch.pressed ? #b3b3b3 : #c9c9c9;
//         font-size: 14px;
//         vertical-alignment: center;
//         horizontal-alignment: center;
//     }
//     touch := TouchArea { }
// }

export component HealButton inherits Rectangle {
    in property <length> area-width;
    in property <length> area-height;
    in property <length> button-width;
    in property <length> button-height;

    in-out property text <=> txt.text;

    callback clicked <=> touch.clicked;

    horizontal-stretch: 0;
    vertical-stretch: 0;

    width: area-width;
    height: area-height;

    base := Rectangle {
        width: button-width;
        height: button-height;

        border-radius: root.height / 8;
        border-width: 1px;
        border-color: root.background.darker(25%);
        background: touch.pressed ? Palette.heal_button_pressed_color : touch.has-hover ? Palette.heal_button_hover_color :  Palette.heal_button_idle_color;
    }

    txt := Text {
        y: (parent.height - self.height)/2;
        color: touch.pressed ? #b3b3b3 : #c9c9c9;
        font-size: 14px;
        vertical-alignment: center;
        horizontal-alignment: center;
    }

    touch := TouchArea {
        width: area-width;
        height: area-height;
    }
}

export component TempHpButton inherits Rectangle {
    in property <length> area-width;
    in property <length> area-height;
    in property <length> button-width;
    in property <length> button-height;

    in-out property text <=> txt.text;

    callback clicked <=> touch.clicked;

    horizontal-stretch: 0;
    vertical-stretch: 0;

    width: area-width;
    height: area-height;

    base := Rectangle {
        width: button-width;
        height: button-height;

        border-radius: button-height / 8;
        border-width: 1px;
        border-color: root.background.darker(25%);
        background: touch.pressed ? Palette.temphp_button_pressed_color : touch.has-hover ? Palette.temphp_button_hover_color :  Palette.temphp_button_idle_color;
    }

    txt := Text {
        y: (parent.height - self.height)/2;
        color: touch.pressed ? #b3b3b3 : #c9c9c9;
        font-size: 14px;
        vertical-alignment: center;
        horizontal-alignment: center;
    }

    touch := TouchArea {
        width: area-width;
        height: area-height;
    }
}

export component NormalButton inherits Rectangle {
    in-out property text <=> txt.text;
    callback clicked <=> touch.clicked;
    border-radius: root.height / 8;
    border-width: 1px;
    border-color: root.background.darker(25%);
    background: touch.pressed ? Palette.normal_button_pressed_color : touch.has-hover ? Palette.normal_button_hover_color :  Palette.normal_button_idle_color;
    min-width: txt.preferred-width * 1.1;
    txt := Text {
        y: (parent.height - self.height)/2;
        color: touch.pressed ? #b3b3b3 : #c9c9c9;
        font-size: 14px;
        vertical-alignment: center;
        horizontal-alignment: center;
    }
    touch := TouchArea { }
}

export component SizedButton inherits Rectangle {
    in property <length> area-width;
    in property <length> area-height;
    in property <length> button-width;
    in property <length> button-height;
    in property <length> text-size: 14px;

    in-out property text <=> txt.text;

    callback clicked <=> touch.clicked;

    horizontal-stretch: 0;
    vertical-stretch: 0;

    width: area-width;
    height: area-height;

    base := Rectangle {
        width: button-width;
        height: button-height;

        border-radius: button-height / 8;
        border-width: 1px;
        border-color: root.background.darker(25%);
        background: touch.pressed ? Palette.normal_button_pressed_color : touch.has-hover ? Palette.normal_button_hover_color :  Palette.normal_button_idle_color;
    }

    txt := Text {
        y: (parent.height - self.height)/2;
        color: touch.pressed ? #b3b3b3 : #c9c9c9;
        font-size: text-size;
        vertical-alignment: center;
        horizontal-alignment: center;
    }

    touch := TouchArea {
        width: area-width;
        height: area-height;
    }
}