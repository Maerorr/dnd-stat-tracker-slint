import { Button, VerticalBox, HorizontalBox } from "std-widgets.slint";
import { TopBar } from "elements/panels/top_bar.slint";
import { Palette } from "elements/palette.slint";
import { StatsPanel } from "elements/panels/stats.slint";
import { Line } from "elements/drawing.slint";
import { SavesProficiencies } from "elements/panels/saves_profs.slint";
import { SlintCharacter } from "logic.slint";
import { EditMode } from "elements/globals.slint";
import { AcHpMoneyPanel } from "elements/panels/ac_hp_money.slint";

import "fonts/typey.otf";
import { FeaturesAndTraits } from "elements/panels/features_traits.slint";
import { SpellListEq } from "elements/panels/spelllist_eq.slint";

export component AppWindow inherits Window {
    width: 1920px;
    height: 1000px;
    in-out property <SlintCharacter> character;

    default-font-family: "Typey McTypeface";

    // callbacks
    callback add-money(string, string);
    callback subtract-money(string, string);

    callback take-damage(string);
    callback heal(string);
    callback add-temp-hp(string);
    callback subtract-temp-hp(string);

    callback add-max-hp(string);

    callback use-hit-dice();
    callback add-hit-dice();
    callback subtract-hit-dice();

    callback add-hit-dice-left();
    callback subtract-hit-dice-left();

    callback add-death-save-success();
    callback add-death-save-failure();
    callback reset-death-saves();

    // (from, to, amount-as-string)
    callback convert-money(string, string, string);

    callback use-spell-slot(string);
    callback add-spell-slot(string);

    callback edit-stat(string, string);
    callback save();
    callback save-character-select();

    callback set-skill-proficiency(string, bool);
    callback set-skill-expertise(string, bool);
    callback set-save-proficiency(string, bool);

    callback set-languages-proficiencies(string);

    callback add-ac();
    callback subtract-ac();
    callback add-initiative();
    callback subtract-initiative();
    callback add-speed();
    callback subtract-speed();

    background: Palette.background_color;
    TopBar {
        in-character: character;
        save => {
            save();
        }
        save-character-select => {
            save-character-select();
        }
    }
    HorizontalLayout {
        x: 0;
        y: 100px;
        alignment: start;

        StatsPanel {
            in-character: character;
            edit-stat(val, sign) => {
                edit-stat(val, sign);
            }
        }

        Line {
            from: {x: 0, y: 0};
            to: {x: 0, y: 100.0};
            stroke: Palette.text_color;
        }

        SavesProficiencies {
            in-character: character;
            set-skill-proficiency(string, bool) => {
                set-skill-proficiency(string, bool);
            }
            set-skill-expertise(string, bool) => {
                set-skill-expertise(string, bool);
            }
            set-save-proficiency(string, bool) => {
                set-save-proficiency(string, bool);
            }
            set-languages-proficiencies(text) => {
                set-languages-proficiencies(text);
            }
        }
        
        Line {
            from: {x: 0, y: 0};
            to: {x: 0, y: 100.0};
            stroke: Palette.text_color;
        }

        AcHpMoneyPanel {
            in-character: character;
            add-money(string, int) => {
                add-money(string, int);
            }
            subtract-money(string, int) => {
                subtract-money(string, int);
            }
            take-damage(string) => {
                take-damage(string);
            }
            heal(string) => {
                heal(string);
            }
            add-temp-hp(string) => {
                add-temp-hp(string);
            }
            subtract-temp-hp(string) => {
                subtract-temp-hp(string);
            }
            use-hit-dice => {
                use-hit-dice();
            }
            add-failure => {
                add-death-save-failure();
            }
            add-success => {
                add-death-save-success();
            }
            reset-death-saves => {
                reset-death-saves();
            }
            convert-money(from, to, amount) => {
                convert-money(from, to, amount);
            }
            add-ac => {
                add-ac();
            }
            sub-ac => {
                subtract-ac();
            }
            add-initiative => {
                add-initiative();
            }
            sub-initiative => {
                subtract-initiative();
            }
            add-speed => {
                add-speed();
            }
            sub-speed => {
                subtract-speed();
            }
            add-max-hp(val) => {
                add-max-hp(val);
            }
            add-hit-dice => {
                add-hit-dice();
            }
            sub-hit-dice => {
                subtract-hit-dice();
            }
            sub-hit-dice-left => {
                subtract-hit-dice-left();
            }
            add-hit-dice-left => {
                add-hit-dice-left();
            }
        }

        Line {
            from: {x: 0, y: 0};
            to: {x: 0, y: 100.0};
            stroke: Palette.text_color;
        }

        FeaturesAndTraits {
            in-character: character;
        }

        Line {
            from: {x: 0, y: 0};
            to: {x: 0, y: 100.0};
            stroke: Palette.text_color;
        }

        SpellListEq {
            in-character: character;
            widget-width: 800px;
            use-spell-slot(string) => {
                use-spell-slot(string);
            }
            add-spell-slot(string) => {
                add-spell-slot(string);
            }
        }

        Line {
            from: {x: 0, y: 0};
            to: {x: 0, y: 100.0};
            stroke: Palette.text_color;
        }
    }
}
