import { Button, VerticalBox, HorizontalBox, StandardButton } from "std-widgets.slint";
import { TopBar } from "elements/panels/top_bar.slint";
import { Palette } from "elements/palette.slint";
import { StatsPanel } from "elements/panels/stats.slint";
import { Line } from "elements/drawing.slint";
import { SavesProficiencies } from "elements/panels/saves_profs.slint";
import { SlintCharacter, SlintSpellDatabase, SlintCharacterShortInfo } from "logic.slint";
import { EditMode } from "elements/globals.slint";
import { AcHpMoneyPanel } from "elements/panels/ac_hp_money.slint";

import "fonts/typey.otf";
import { FeaturesAndTraits } from "elements/panels/features_traits.slint";
import { SpellListEq } from "elements/panels/spelllist_eq.slint";
import { Equipment, AddItem } from "elements/eq.slint";
import { StatTrackerState } from "elements/states/stat-tracker.slint";
import { CharacterSelectState } from "elements/states/character-select.slint";

export enum SlintState {CharacterSelect, StatTracker}

export component AppWindow inherits Window {
    width: 1920px;
    height: 1000px;

    in property <SlintState> state;
    in property <SlintCharacter> current-character;

    in property <[SlintCharacterShortInfo]> all-characters;

    in-out property <SlintSpellDatabase> spell-database;
    background: Palette.background_color;

    default-font-family: "Typey McTypeface";

    callback add-money(string, string);
    callback subtract-money(string, string);

    callback take-damage(string);
    callback heal(string);
    callback add-temp-hp(string);
    callback subtract-temp-hp(string);

    callback add-max-hp(string);

    callback use-hit-dice();
    callback add-hit-dice();
    callback subtract-hit-dice();

    callback add-hit-dice-left();
    callback subtract-hit-dice-left();

    callback add-death-save-success();
    callback add-death-save-failure();
    callback reset-death-saves();

    // (from, to, amount-as-string)
    callback convert-money(string, string, string);

    callback use-spell-slot(string);
    callback add-spell-slot(string);

    callback add-max-spell-slot(string);
    callback subtract-max-spell-slot(string);

    callback add-spell(string);
    callback remove-spell(string);

    callback edit-stat(string, string);
    callback save();
    callback save-character-select();

    callback set-skill-proficiency(string, bool);
    callback set-skill-expertise(string, bool);
    callback set-save-proficiency(string, bool);

    callback set-languages-proficiencies(string);

    callback add-ac();
    callback subtract-ac();
    callback add-initiative();
    callback subtract-initiative();
    callback add-speed();
    callback subtract-speed();

    callback add-item(string, string, string);
    callback item-amount-changed(string, string);
    callback remove-item(string);

    callback character-select(string);

    VerticalLayout {
        alignment: start;
        HorizontalLayout {
            alignment: start;
            if state == SlintState.StatTracker : StatTrackerState {
                character: current-character;
                spell-database: spell-database;
        
                add-money(string, string) => {
                    add-money(string, string);
                }
                subtract-money(string, string) => {
                    subtract-money(string, string);
                }
                take-damage(string) => {
                    take-damage(string);
                }
                heal(string) => {
                    heal(string);
                }
                add-temp-hp(string) => {
                    add-temp-hp(string);
                }
                subtract-temp-hp(string) => {
                    subtract-temp-hp(string);
                }
                add-max-hp(string) => {
                    add-max-hp(string);
                }
                use-hit-dice() => {
                    use-hit-dice();
                }
                add-hit-dice() => {
                    add-hit-dice();
                }
                subtract-hit-dice() => {
                    subtract-hit-dice();
                }
                add-hit-dice-left() => {
                    add-hit-dice-left();
                }
                subtract-hit-dice-left() => {
                    subtract-hit-dice-left();
                }
                add-death-save-success() => {
                    add-death-save-success();
                }
                add-death-save-failure() => {
                    add-death-save-failure();
                }
                reset-death-saves() => {
                    reset-death-saves();
                }
                convert-money(string, string, string) => {
                    convert-money(string, string, string);
                }
                use-spell-slot(string) => {
                    use-spell-slot(string);
                }
                add-spell-slot(string) => {
                    add-spell-slot(string);
                }
                add-max-spell-slot(string) => {
                    add-max-spell-slot(string);
                }
                subtract-max-spell-slot(string) => {
                    subtract-max-spell-slot(string);
                }
                add-spell(string) => {
                    add-spell(string);
                }
                remove-spell(string) => {
                    remove-spell(string);
                }
                edit-stat(string, string) => {
                    edit-stat(string, string);
                }
                save() => {
                    save();
                }
                set-skill-proficiency(string, bool) => {
                    set-skill-proficiency(string, bool);
                }
                set-skill-expertise(string, bool) => {
                    set-skill-expertise(string, bool);
                }
                set-save-proficiency(string, bool) => {
                    set-save-proficiency(string, bool);
                }
                set-languages-proficiencies(string) => {
                    set-languages-proficiencies(string);
                }
                add-ac() => {
                    add-ac();
                }
                subtract-ac() => {
                    subtract-ac();
                }
                add-initiative() => {
                    add-initiative();
                }
                subtract-initiative() => {
                    subtract-initiative();
                }
                add-speed() => {
                    add-speed();
                }
                subtract-speed() => {
                    subtract-speed();
                }
                add-item(string, string, string) => {
                    add-item(string, string, string);
                }
                item-amount-changed(string, string) => {
                    item-amount-changed(string, string);
                }
                remove-item(string) => {
                    remove-item(string);
                }
                save-character-select() => {
                    save-character-select();
                }
            }
            if state == SlintState.CharacterSelect : CharacterSelectState {
                all-characters: all-characters;
                character-selected(string) => {
                    character-select(string);
                }

            }
        }
    }
    
}
